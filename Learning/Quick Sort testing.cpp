#include <iostream>
#include <vector>

using namespace std;

int partition2(vector<int>& arr,int first,int last) {
    int i = first;
    int x = arr[last];
    for (int j=first;j<last;j++) {
        if (arr[j]<=x) {
            swap(arr[i++],arr[j]);
        }
    }
    swap(arr[i],arr[last]);
    return i;
}
/*
int partition(vector<int>& arr,int first,int last) {
    int pivotValue = arr[first];
    int leftMark = first+1;
    int rightMark = last;
    bool done = false;

    while (not done) {
        while (leftMark<=rightMark && arr[leftMark]<=pivotValue){leftMark++;}
        while (leftMark<=rightMark && arr[rightMark]>=pivotValue){rightMark--;}
        if (rightMark<=leftMark) {
            done = true;
        }
        else {
            swap(arr[leftMark],arr[rightMark]);
        }
    }
    swap(arr[first],arr[rightMark]);
    return rightMark;
}
*/
void quickSort(vector<int>& arr,int first, int last) {
    if (first<last) {
        int splitPoint = partition2(arr,first,last);
        quickSort(arr,first,splitPoint-1);
        quickSort(arr,splitPoint+1,last);
    }
}

int main() {
    vector<int> numbers{{548,-159,-663,899,-41,52,-3,-224,-818,28,339,930,-412,-917,677,-175,149,894,798,826,-438,8,-437,-363,-717,-73,323,-131,787,293,701,982,983,-193,-369,823,745,637,-336,-875,-205,50,-545,-862,294,529,-231,-454,-848,880,960,933,-211,535,-27,239,-776,914,-420,-458,695,-37,970,659,-499,-340,943,-212,32,314,913,-488,-390,-911,-405,-391,65,819,218,-837,247,106,505,470,-786,206,-957,-840,-465,-692,151,-652,-976,-375,156,-698,-775,-539,-642,-535,-598,-241,-272,-295,988,-185,-611,353,156,423,806,243,-656,29,-114,-728,959,544,-388,267,-325,211,123,-878,-53,-410,-831,783,-923,294,260,589,977,-748,-940,530,-370,639,706,-312,253,-558,748,-213,-7,389,-952,505,479,-628,-169,-145,811,-317,120,409,854,-153,-202,-985,-964,988,564,406,-469,928,-355,-74,-93,-610,743,877,-887,220,-486,-410,212,707,-475,938,762,211,-591,-806,923,-541,-9,532,-797,121,-212,-997,128,94,829,746,836,-414,-844,240,-73,797,998,-158,909,919,-54,319,-494,510,872,825,-620,58,66,-333,445,572,-857,-352,947,607,-230,675,-732,-913,917,-965,-245,470,956,-546,-97,-404,642,51,-609,439,604,963,450,116,-91,-137,990,862,-471,-532,-739,201,-241,248,264,562,985,-4,285,847,-878,495,97,-304,-136,781,-738,-84,978,495,811,923,446,-555,304,-971,-579,653,-285,-361,896,876,254,-197,247,-662,308,753,488,-114,-214,-907,-29,-400,-738,870,134,-812,-181,510,-805,655,-140,774,523,572,317,143,705,-188,39,315,-151,308,-740,-752,-223,-822,491,-603,-108,932,866,88,-251,623,991,-682,-467,-160,-443,-228,163,930,465,-903,-953,-924,-284,487,485,-481,-607,250,-803,891,-414,-894,917,-161,377,202,-112,827,-825,339,976,-569,216,-555,-281,-780,435,500,847,-185,797,940,502,961,-809,-608,-641,529,707,-421,-78,503,43,-443,80,-953,-834,-168,664,-395,656,469,866,499,-402,473,-643,-193,-631,997,-705,581,78,173,170,-265,367,376,-609,-224,140,982,-440,139,598,-631,530,485,666,918,-639,207,-442,-395,-540,-448,-623,385,645,266,-439,972,-341,-444,782,-769,6,-19,822,-957,622,336,-31,716,387,-231,-352,723,627,74,983,827,366,203,250,-654,-885,866,122,518,-623,243,-170,-248,694,-792,-876,-993,184,444,649,-342,412,-827,-167,870,652,336,-571,93,684,996,251,937,763,-212,-619,-53,-848,-780,679,-576,-470,-188,-544,-637,181,229,-998,-988,692,894,504,-521,675,527,662,-290,977,-499,921,-453,-148,814,160,893,101,152,177,740,-181,232,802,380,-609,-635,-500,-423,-665,-483,362,-687,373,147,760,-101,997,-123,66,-184,-480,-932,-995,-160,749,-232,-370,720,881,76,739,482,372,-719,239,54,-362,-999,-943,650,-71,138,530,-503,646,774,-650,-834,511,705,782,970,840,300,245,-798,-113,-746,-145,-414,847,762,807,696,491,132,751,566,-476,-918,-408,-983,-798,260,-934,682,-310,768,-423,-339,-411,443,331,-488,-406,-492,-629,505,-975,264,-352,-27,742,-610,-381,-859,762,-89,-104,-517,-347,-14,-445,237,179,627,-655,699,-30,937,-85,576,-59,244,-127,882,-97,466,976,-115,-224,815,-200,-667,-255,-156,173,-715,-585,276,531,-602,-15,237,-730,-181,-990,871,823,782,-452,422,117,918,767,-676,-629,735,620,-531,-338,-860,324,-31,907,83,684,198,-323,-483,-131,571,56,-932,-846,-823,-412,605,81,-183,-776,-293,763,-603,-999,807,-129,969,-16,963,-333,-807,18,170,-309,-601,680,7,381,153,552,751,-564,-415,-295,223,-134,249,8,596,309,-747,-275,-472,737,-698,806,-116,923,460,-341,-194,-432,376,275,827,-12,-835,416,517,24,495,-285,664,-984,300,-40,599,288,498,946,-553,-84,676,-754,-398,-978,-295,117,-232,-538,-655,-176,-348,863,-271,-243,549,-430,558,-711,-574,722,-419,886,-448,674,-455,678,195,-331,124,-354,158,750,-530,-90,-645,-704,-641,-960,-657,173,-138,898,-961,100,-175,995,-52,-170,-287,918,109,601,-950,548,284,63,652,-586,657,-85,754,527,801,125,-365,-816,327,779,-192,576,847,319,144,-357,-582,-88,-240,-345,-292,883,443,535,912,-111,-980,-147,589,-302,-311,-746,-905,643,910,366,381,328,94,163,-380,-932,827,650,281,934,-93,148,555,956,42,-389,304,900,-266,727,-58,462,330,-577,-758,-295,439,-531,497,-378,-83,146,-551,-407,551,679,-895,252,283,-497,-537,889,-624,76,395,-132,-78,843,-357,-96,-313,889,-165,-390,-689,-508,893,-429,-800,668,480,-15,38,-539,571,-957,288,242,475,994,-580,339,768,-395,676,581,-862,360,-559,-243,979,314,-809,288,567,781,56,978,-510,427,-325,872,857,-15,281,526,95,569,762,-188,863,-787,-678,-41,990,-434,-718,-587,68,-589,833,-174,-550,-602,695,-580,21,20,-877,123,613,730,-13,-303,843,-681,-611,-806,-910,-761,95,433,759,-161,833,-245,584,6,697,-418,-407,288,-511,-332,492,519,-30,674,-403,34,584,448,-338,-525,361,906,-648,92,930};
    quickSort(numbers,0,numbers.size()-1);
    // for (int i:numbers){cout<<i<< " ";}cout << endl;
    return 0;
}

